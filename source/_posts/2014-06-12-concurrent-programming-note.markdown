---
layout: post
title: "《#2 并发编程》 学习笔记"
date: 2014-06-12 12:49:46 +0800
comments: true
categories: study
keywords: iOS GCD
---
文章地址：[objc第二章](http://objccn.io/issue-2/)

## 并发编程：API 及挑战

### OS X 和 iOS 中的并发编程
#### Grand Central Dispatch(GCD)

GCD 在后端管理着一个线程池，可以将开发者从线程管理的工作中解放出来，通过集中的管理线程，来缓解大量线程被创建的问题。在日常开发中，最好使用 GCD 来做线程方面的工作。

GCD 公开有 5 个不同的队列：运行在主线程中的 main queue，3 个不同优先级的后台队列，以及一个优先级更低的后台队列（用于 I/O）

使用不同优先级的若干个队列乍听起来非常直接，不过，我们强烈建议，`在绝大多数情况下使用默认的优先级队列就可以了`。

![http://img.objccn.io/issue-2/gcd-queues.png](http://img.objccn.io/issue-2/gcd-queues.png)

#### Operation Queues

操作队列（operation queue）是由 GCD 提供的一个队列模型的 Cocoa 抽象。GCD 提供了更加底层的控制，而操作队列则在 GCD 之上实现了一些方便的功能，这些功能对于 app 的开发者来说通常是最好最安全的选择。

`NSOperationQueue` 有两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。在两种类型中，这些队列所处理的任务都使用 `NSOperation` 的子类来表述。

#### Run Loops
Run loop并不像 GCD 或者操作队列那样是一种并发机制，因为它并不能并行执行任务。不过在主 dispatch/operation 队列中， run loop 将直接配合任务的执行，它提供了一种异步执行代码的机制。

Run loop 比起操作队列或者 GCD 来说容易使用得多，因为通过 run loop ，你不必处理并发中的复杂情况，就能异步地执行任务。

### 并发编程中面临的挑战
#### 资源共享
并发编程中许多问题的根源就是在多线程中访问共享资源。

在多线程中任何一个共享的资源都可能是一个潜在的冲突点，你必须精心设计以防止这种冲突的发生。

为了防止出现这样的问题，多线程需要一种互斥的机制来访问共享资源。

#### 互斥锁
互斥访问的意思就是同一时刻，只允许一个线程访问某个特定资源。

从语言层面来说，在 Objective-C 中将属性以 atomic 的形式来声明，就能支持互斥锁了。事实上在默认情况下，属性就是 atomic 的。将一个属性声明为 atomic 表示每次访问该属性都会进行隐式的加锁和解锁操作。虽然最把稳的做法就是将所有的属性都声明为 atomic，但是加解锁这也会付出一定的代价。

#### 死锁
互斥锁解决了竞态条件的问题，但很不幸同时这也引入了一些其他问题，其中一个就是死锁。当多个线程在相互等待着对方的结束时，就会发生死锁，这时程序可能会被卡住。

#### 资源饥饿（Starvation）
大多数情况下，限制资源一次只能有一个线程进行读取访问其实是非常浪费的。因此，在资源上没有写入锁的时候，持有一个读取锁是被允许的。这种情况下，如果一个持有读取锁的线程在等待获取写入锁的时候，其他希望读取资源的线程则因为无法获得这个读取锁而导致资源饥饿的发生。

#### 优先级反转
优先级反转是指程序在运行时低优先级的任务阻塞了高优先级的任务，有效的反转了任务的优先级。

解决这个问题的方法，通常就是不要使用不同的优先级。通常最后你都会以让高优先级的代码等待低优先级的代码来解决问题。`当你使用 GCD 时，总是使用默认的优先级队列（直接使用，或者作为目标队列）`。如果你使用不同的优先级，很可能实际情况会让事情变得更糟糕。

### 总结

我们建议采纳的安全模式是这样的：从主线程中提取出要使用到的数据，并利用一个操作队列在后台处理相关的数据，最后回到主队列中来发送你在后台队列中得到的结果。使用这种方式，你不需要自己做任何锁操作，这也就大大减少了犯错误的几率。


## 常见的后台实践
### 操作队列 (Operation Queues) 还是 GCD ?
`GCD 是基于 C 的底层的 API ，而操作队列则是 GCD 实现的 Objective-C API。`

`操作队列可以取消在任务处理队列中的任务`，而在 GCD 中不那么容易复制的有用特性。

#### 后台的 Core Data
`Core Data`不熟悉

http://www.cnblogs.com/yjg2014/p/yjg.html

http://m.blog.csdn.net/blog/againbike/11870459