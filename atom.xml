<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sjpsega's Blog]]></title>
  <link href="http://sjpsega.me/atom.xml" rel="self"/>
  <link href="http://sjpsega.me/"/>
  <updated>2020-07-04T21:06:50+08:00</updated>
  <id>http://sjpsega.me/</id>
  <author>
    <name><![CDATA[sjpsega]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2019 年终总结]]></title>
    <link href="http://sjpsega.me/blog/2020/02/15/2019summary/"/>
    <updated>2020-02-15T23:08:33+08:00</updated>
    <id>http://sjpsega.me/blog/2020/02/15/2019summary</id>
    <content type="html"><![CDATA[<p>2020 这开年真不一般，过年期间，科比走了，新型冠状病毒疫情疫情爆发，原本再该结束的春节假期，被迫延迟，在家办公。
日子也过晕头了，偶然翻了一翻博客，才发我 19 年的年终总结都没写，现在补上。</p>

<ul>
<li><p>喜</p>

<ul>
<li>儿子女儿均健康成长。儿子顺利读上了离家最近且心怡的小学，第一学期结束，拿到了「全优生」奖状，真是好样的！女儿可爱异常，一岁多了，会走会跑，现在非常喜欢和我一起看小猪佩奇，喜欢和我一起认识小动物；虽然还不会讲话，但她和她说话，她基本懂了。</li>
<li>9 月初，娃就要上小学了，请假出去旅游，不像幼儿园那么随意了，所以 8 月底，带儿子、老婆、丈母娘，一起去北京玩了一趟。除了一趟出差，我是第二次去北京，玩了几个必去的景点：故宫、长城、颐和园、圆明园，虽然有点累，但玩得很开心。在北京西单站，我还遇到了我的高中生物老师，实在是太凑巧了。</li>
<li>公司旅游，去了千岛湖。来公司这么多年，还是第一次去千岛湖，在酒店躺到自然醒，吃吃千岛湖鱼头，感觉不错。</li>
<li>工作上，18 年还是一如既往得顺利，表现不错。</li>
<li>P2P 在 1 月底全部回款完毕，成功躲过了 P2P 的暴雷。后来，再去看看「懒投资」，发现也出现逾期现象了，真是幸运。</li>
</ul>
</li>
<li><p>忧</p>

<ul>
<li>还是和去年一样，平时工作上还是不够专注，经常手机上看股票行情，效率低下。投资上，要学会多总结，做长线思维；目前，基金、股票仓位对半，有股票仓位，主要为了打新股，提高收益。</li>
<li>儿子上小学了，我和老婆平常工作忙碌，再加上还要照顾女儿，每天晚上，我和老婆轮流给儿子辅导功课，真的是痛并快乐着。儿子学习上感觉还是傻傻的，应该是还没开窍吧。</li>
<li>作息还是（第四年了吧……）不规则，经常搞到一两点才睡…</li>
<li>去年，晋升再次失败了，总结抽象层次不够高，临场发挥弱鸡……今年再加油吧！</li>
<li>去年 18 年的总结，还在为做空美股，大赚一笔感到兴奋；现在，我却要为去年一年做空美股后悔！去年，美股收益率为 <font color="green">-45.88%</font>，几近腰斩，还好占比总投资资金比例不高。在 A 股、港股赚钱的情况下，去年的投资总收益为 +4.34%。</li>
</ul>
</li>
</ul>


<h2>2020 展望</h2>

<ul>
<li>多陪陪儿子女儿，更加耐心得辅导儿子的功课，多陪陪儿女，陪她慢慢长大。</li>
<li>投资上要稳扎稳打，秉承做多 A 股、港股，美股谨慎的原则，买入核心资产，做价值投资。</li>
<li>工作专注，多做总结，提高上班 8 小时的效率，早点回家，多陪陪家人。（第三年提这条了……）</li>
<li>平时作息要规律，晚上 12 点睡觉，身体重要。（第四年提这条了……）</li>
</ul>


<p>加油！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOHO 工作一周的感受]]></title>
    <link href="http://sjpsega.me/blog/2020/02/09/soho/"/>
    <updated>2020-02-09T21:15:39+08:00</updated>
    <id>http://sjpsega.me/blog/2020/02/09/soho</id>
    <content type="html"><![CDATA[<p><img src="http://sjpsega.me/images/2020-02-09-soho/ncp-2020-02-09.PNG" alt="2019global-stock-market" /></p>

<p>因新型冠状病毒爆发，全国人民均在家隔离，春节后的复工也延迟了，孩子学校同样延迟开学了。
这周我们公司开始在家 SOHO 办公，孩子也在家，需要照顾，我是心力交瘁。</p>

<ul>
<li>生活

<ul>
<li>因平常要亲自解决娃三餐中的两餐，还要督促他写作业、上网课，工作时间被撕得七零八落，整体工作效率大打折扣。晚饭一家人一起吃，耗时较长。晚上最晚 9 点，娃就要洗漱睡觉了，陪娃读英语讲故事，晚上基本废了。</li>
<li>过年前，下单了一台 iPad 2019，给娃上网课看。结果因为疫情问题，大量教育公司均开启了网上免费教学，娃的学校也马上要直播上课，这台 iPad 买得太值了。而且发现，看电子书、看文章这些，用 iPad 看，比手机爽多了，真是我的年度最惊喜电子产品。前几天又下单了一台爱普生打印机，在家给娃打印作业、练习用，可以更好地在家办公与学习了。

<ul>
<li>平常陪娃的时间一周只有 24 小时左右，现在陪娃一天就达到了 24 小时，两人的感情得到了良好得培养，这是巨大的收获。</li>
</ul>
</li>
</ul>
</li>
<li>工作

<ul>
<li>因疫情关系，前线通常难以到店做客情工作，所以线上化的手段尤其重要。本周花了较多时间讨论了直播、短视频方面，快速支持前线工作的方案。</li>
<li>在家办公，工作专注度受到影响。至少到周三才找到一些状态。经验是把每天的工作拆细，最好拆解到小时，时间稍放宽，尽量保障每天的效率能跟上。</li>
</ul>
</li>
<li>总结

<ul>
<li>几年后，记不清 18 年、19 年的春节是怎么过的，但肯定记得 20 的春节是怎么过的，太难忘了。珍惜 SOHO 的每一天。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[放下]]></title>
    <link href="http://sjpsega.me/blog/2020/01/10/putitdown/"/>
    <updated>2020-01-10T15:42:13+08:00</updated>
    <id>http://sjpsega.me/blog/2020/01/10/putitdown</id>
    <content type="html"><![CDATA[<p>昨天，终于受不了，把空头仓位都清了……美股太疯狂……不管好消息坏消息，都涨，只是快慢而已……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2019 年投资总结]]></title>
    <link href="http://sjpsega.me/blog/2020/01/01/2020-invest-summary/"/>
    <updated>2020-01-01T23:03:53+08:00</updated>
    <id>http://sjpsega.me/blog/2020/01/01/2020-invest-summary</id>
    <content type="html"><![CDATA[<p>2020 年已经到来，19 年依然过去，照例要总结下 2019 在投资上的得失。</p>

<h2>概况</h2>

<table>
<thead>
<tr>
<th style="text-align:left;">投资标的</th>
<th style="text-align:left;">收益率</th>
<th style="text-align:left;">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">A 股 1(RMB)</td>
<td style="text-align:left;"><font color="red">+13.88%</font></td>
<td style="text-align:left;">上证：2493.9 - 3050.12，+22.30%；<br>创业板：1250.53 - 1798.12，+43.78%；<br>中证 1000：4430.02 - 5567.03，+25.66%</td>
</tr>
<tr>
<td style="text-align:left;">A 股 2(RMB)</td>
<td style="text-align:left;"><font color="red">+25.78%</font></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">A 股 3(RMB)</td>
<td style="text-align:left;"><font color="red">+1.12%</font></td>
<td style="text-align:left;">(年末新开账户)</td>
</tr>
<tr>
<td style="text-align:left;">港股(HKD)</td>
<td style="text-align:left;"><font color="red">+7.15%</font></td>
<td style="text-align:left;">恒生：25845.7 - 28189.75，+9.06%</td>
</tr>
<tr>
<td style="text-align:left;">美股(USD)</td>
<td style="text-align:left;"><font color="green">-45.88%</font></td>
<td style="text-align:left;">道琼斯：23327.46 - 28538.44，+22.34%；<br>纳斯达克：6635.28 - 8972.6，+35.23%；<br>标普 500：2506.85 - 3230.78，+28.88%</td>
</tr>
</tbody>
</table>


<p>注：收益计算采用简单方案，资金流入全部算作期初本金。</p>

<p>在去年做空美股的指导思想下，美股大幅亏损，A 股港股勉强跟上大盘。综合所有账户，去年的投资总收益为 <code>+4.34%</code>，凄凄惨惨戚戚。</p>

<h2>A 股</h2>

<h3>概述</h3>

<p><img src="http://sjpsega.me/images/2020-01-01-2020-invest-summary/2019global-stock-market.jpg" alt="2019global-stock-market" /></p>

<p>19 年，A 股涨幅在全球排名占据前排，其中深证成指、创业板指排名第二、第三。</p>

<p>19 年的 A 股行情，和 17 年很像，两极分化严重，旱的旱死涝的涝死。</p>

<ul>
<li>A 股 「核心资产」再度凯歌高奏，茅台、恒瑞、招商、爱尔眼科、通策医疗、格力、美的等等，大幅上涨。</li>
<li>主题行情不断，我印象比较深的有 白酒、猪肉、5G、消费电子、半导体，白酒的 贵州茅台，猪肉的 牧原股份，5G 的 沪电股份，消费电子的 立讯精密，半导体的 兆易创新。</li>
<li>巨雷不断，康得新、康美药业巨额存款不翼而飞，雏鹰农牧的猪饿死了，獐子岛的扇贝又游走了……</li>
</ul>


<p>今年，核心资产、主题行情，能抓住一个就很爽，否则……我就是否则，一个都没抓住；巨雷倒是没遇到，还算走运……</p>

<p>我还是使用买入高股息股票 + 打新的策略，今年的收益率勉强跟上了上证指数的涨幅。今年打新，2 个账号一共中了 6 个新股，但总体是小肉，赚得不多，特别是中了浙商银行、渝农商行这两个银行股，很快就破发了，简直悲剧。</p>

<p>今年最好的机会是一季度的时候，一波大行情，从年初到 4 月初，沪指从 2500 一下子冲到 3288 的位置，3288 也是年内的最高点。我 1.31 从 P2P 回了一笔款项，进入 2 月份指数就开始猛涨，我没想到行情进展这么快，一大段踏空，后来追高上了，被套……操作令人唏嘘。</p>

<p>主题行情，一个一个看着他们上去，我是一个没买。真的是看不懂，等缓过神来，也不敢追了。结结实实地经历了看不上、看不懂、追不上的过程，原因在与 <code>「人无法赚到自己认知之外的钱」</code>。</p>

<p>今年，几次回望自己买「格力」股票的几次操作，真是让我顿足捶胸 ：</p>

<ol>
<li>17 年 1 月，本想 24 买入，格力几次跌破 24 ，我没留心，下单意愿不强，结果格力一骑绝尘，仅仅一年时间，到 18 年 1 月，最高到 58，一年时间，翻倍有余。</li>
<li>18 年 8、9 月，40 元左右再次买入格力，因为大行情下跌，我被套了，中间做了几次 T，结果，我成功被洗了出去，19 年格力大涨，19 年收盘，达到 65.58，涨幅 80%。</li>
</ol>


<p>总结原因，还是在于「认知」二字，对核心资产的信念不足，没有长期思维。</p>

<h3>新年策略</h3>

<p>19 年，上证指数围绕 3000 点在做攻防战，上上下下 N 次，但总体偏好：</p>

<ul>
<li>从全局看，估值尚可，局部泡沫化，5G、半导体估值高企。</li>
<li>从资金流看，外资布局 A 股明显，持续流入，19 年流入达 3000亿+，外资持续看好 A 股。</li>
<li>3000 点是估值中枢，看空是不明智的。</li>
</ul>


<p>我个人看好 20 年的行情，但有一些担忧：</p>

<ul>
<li>国内经济增长堪忧，GDP 已经降到 6 %。CPI 高企，猪肉价格还未稳定，影响国内货币策略制定，难以降息，A 股资金不够充分。</li>
<li>国际局势隐患犹存，贸易战第一阶段协议意向明确，但还未签约，但就算签约完成，第二阶段的协议确定，与 美国总统选举的结果，都会影响行情。</li>
</ul>


<p>20 年，我的主要策略是，保持主要仓位不动，执行打新策略；基金持仓，等风来，继续定投 500ETF，证券定投看行情择机处理；股票会切出 &frac14; 仓位左右，按照趋势买入，追求收益。现阶段，目标是买入水泥股票。看情况买入核心资产，现在的估值个人觉得有点贵了，择机行事。</p>

<h2>港股</h2>

<h3>概述</h3>

<p>19 年的港股和 A 股很像，但比 A 股更惨，因为香港的地区性问题，恒指去年涨幅才 9.07%，大行情没有，局部行情高企。
在我印象中，19 年的港股物业、消费、服装股票很 high，物业的 雅生活服务，消费的 海底捞、怡海国际，服装的 安踏、李宁。我还是一个没买……</p>

<p>今天的港股操作不多，仓位较重的 北京控股、太古 B、上海实业控股 继续萎靡，大幅拖累收益。做了小幅换仓，买入 绿叶制药、国药控股、枫叶教育，博收益。</p>

<h3>新年策略</h3>

<p>看好 20 年的港股行情，但担忧被美股影响，毕竟美股又新高了，估值、债务高企，美股下跌，一定会拉港股下水。</p>

<p>我的策略是精简股票，把股票持仓集中一些，目标是 8 支以内，现在太分散了。20 年看好小米，准备再次入手 小米。小米有短暂持仓，震荡几次，小赚出了，结果 12 月，小米大涨 20%+，我也是醉了。</p>

<h2>美股</h2>

<h3>概述</h3>

<p>去年的美股总结，我说 「18 年的美股，头部趋势明显」，简直啪啪打脸，狠狠的！做空美股，损失惨重……19 全年美股大涨，根本原因是，美联储暂停加息，又开启降息通道，放水，美股再次大幅上涨。</p>

<p>苹果，微软，AMD，好未来，阿里，京东 各个涨幅凶猛，因为我是死空头，受伤严重，做主要做空的是 AMD 与 好未来，结果今年 AMD、好未来均大涨，特别是 AMD 领涨半导体板块，四季度，一波 58% 的涨幅，我快被弄死了……因为我还有一些杠杆，大幅上涨，所以今年 2 次收到平仓告警……</p>

<p>今年，靠运气逃脱了 P2P 的魔爪，结果都被美股坑走了。印证了那句 - <code>「靠运气赚来的钱,终将再凭本事亏回去」</code>。</p>

<p>印象中，美联储表示要暂停加息，开启降息通道的消息，去年圣诞左右就传出来了，但我没有仔细分析背后代表的意义，思维定势，一意孤行，硬刚了一年，损失惨重。</p>

<h3>新年策略</h3>

<p>20 年美股的策略是，继续做空，不为别的，就为了挽回一点损失：</p>

<ul>
<li>如果美股大幅下跌，见好就收，一部分择机买入多仓，一部分转仓到港股，抄底港股；</li>
<li>如果美股还是大幅上涨，到目标位，清空空仓，猥琐发育。</li>
</ul>


<h2>总结</h2>

<p>19 年，我对 A 股、港股的操作勉强满意，美股完全判错方向。
20 年，A 股、港股布局优质股，静待花开；美股继续保持做空仓位，猥琐发育，保持谨慎。
还有，最重要的事 - <code>提升认知</code>。
祝 20 年股市如意！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[疯狂的美股]]></title>
    <link href="http://sjpsega.me/blog/2019/11/23/crazyusstock/"/>
    <updated>2019-11-23T00:15:32+08:00</updated>
    <id>http://sjpsega.me/blog/2019/11/23/crazyusstock</id>
    <content type="html"><![CDATA[<p><img src="http://sjpsega.me/images/2019-11-23-crazyusstock/20191122_china_stock.jpg" alt="20191122_china_stock" /></p>

<p><img src="http://sjpsega.me/images/2019-11-23-crazyusstock/20191122_hk_stock.jpg" alt="20191122_hk_stock" /></p>

<p><img src="http://sjpsega.me/images/2019-11-23-crazyusstock/20191122_us_stock.jpg" alt="20191122_us_stock" /></p>

<p>最近的股市，真是可以用操蛋来形容：做多的 A 股港股，震荡下行；做空的美股迭创新高。因为做空加了杠杆，最近账户多次变为「较高风险」等级，因为怕再次变为「预警」等级，需要平仓，故多次买入降杠杆。</p>

<p>看着账户资金逐渐变少，这种感觉，真心难受！我也惊呆了，做空的 拼多多、好未来、AMD，一个比一个牛，迭创新高，心想，如果我是做多的，该多好……</p>

<p>按理说，美股牛了 10 年，最近又连续降息，来保经济，也预示着美股快到头了，但是，长时间的做空，来博美股崩溃的时机，真心难受。心累，钱也难受，因为做空本来就需要付出不少利息。</p>

<p>还是经验不足，更重要的是，长期需要做多，做空要看形式，也只能是短时间，否则是完全把自己暴露在风险当中。</p>

<p>还好上天眷顾，20 号拼多多出财报，不及预期，暴跌 22.89%，将拼多多的仓位平仓，仓位水位大幅下降，且拼多多做空仓位盈利了。</p>

<p><img src="http://sjpsega.me/images/2019-11-23-crazyusstock/20191120_pdd.PNG" alt="20191120_pdd" /></p>

<p>猥琐发育。愿上天再度眷恋我，可能就在明年。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怒放的生命]]></title>
    <link href="http://sjpsega.me/blog/2019/09/15/910/"/>
    <updated>2019-09-15T23:42:21+08:00</updated>
    <id>http://sjpsega.me/blog/2019/09/15/910</id>
    <content type="html"><![CDATA[<p><img src="http://sjpsega.me/images/2019-09-15-910/mayun_pengke.jpeg" alt="mayun_pengke" /></p>

<p>2019-09-10，教师节，也是阿里巴巴 20 周年纪念日；同时，还是阿里的灵魂人物 马云 的生日。</p>

<p>那天，阿里包下杭州奥体，举行了盛大的周年庆祝会。</p>

<p>整场晚会非常精彩，但令我印象最深刻的是，马云 再次朋克风，领衔演唱了《怒放的生命》。</p>

<p>仔细品味歌词，着实演绎了 马爸爸 创立阿里 20 年的真实写照，由 马爸爸 亲口演唱，实在是再合适不过了！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>曾经多少次跌倒在路上
</span><span class='line'>曾经多少次折断过翅膀
</span><span class='line'>如今我已不再感到彷徨
</span><span class='line'>我想超越这平凡的奢望
</span><span class='line'>我想要怒放的生命
</span><span class='line'>就像飞翔在辽阔天空
</span><span class='line'>就像穿行在无边的旷野
</span><span class='line'>拥有挣脱一切的力量
</span><span class='line'>曾经多少次失去了方向
</span><span class='line'>曾经多少次破灭了梦想
</span><span class='line'>如今我已不再感到迷茫
</span><span class='line'>我要我的生命得到解放
</span><span class='line'>我想要怒放的生命
</span><span class='line'>就像飞翔在辽阔天空
</span><span class='line'>就像穿行在无边的旷野
</span><span class='line'>拥有挣脱一切的力量
</span><span class='line'>我想要怒放的生命
</span><span class='line'>就像矗立在彩虹之巅
</span><span class='line'>就像穿行在璀璨的星河
</span><span class='line'>拥有超越平凡的力量</span></code></pre></td></tr></table></div></figure>




<iframe height='498' width='100%' src='http://player.youku.com/embed/XNDM1Nzg1Mzk2NA==' frameborder=0 'allowfullscreen'></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[科创板]]></title>
    <link href="http://sjpsega.me/blog/2019/07/22/kechuangban/"/>
    <updated>2019-07-22T23:41:55+08:00</updated>
    <id>http://sjpsega.me/blog/2019/07/22/kechuangban</id>
    <content type="html"><![CDATA[<p>今天，又是一个 A 股历史上的大日子 - 大大钦点的「科创板」正式上线。</p>

<p>据说 7.22 上线，是因为 05、14 年的大牛市的起点，是以 7.22 为支点。</p>

<p>今天科创板的走势 - 先抑后扬，据说和当年的科创板上线第一天的走势非常像：开盘高开，一波下杀，换手充分；临近中午，达到全天高点，然后平稳下跌。其实，昨天 骑大 的文章《科创首日上市，牢记7个数字》，已经把一天的情况，都数字化分析过了，奈何，缺乏实际体验，今早也没再次细读，导致今天对中科创板新股 - 天宜上佳（688033）的操作稀烂：早上下杀卖了一笔，下午平稳下跌，再卖一笔。卖点太差了……</p>

<p><img src="http://sjpsega.me/images/2019-07-22-kechuangban/688033-situation.png" alt="688033-situation" /></p>

<p>今天，科创板首发 25 支新股，首日平均涨幅 140%，我才赚了 60%，哭死……</p>

<p>按照科创板的规则，新股上市前 5 日，无涨幅限制，但第 1 天换手已经达到 80%，后面几天预计行情会更加精彩，拭目以待。</p>

<p><img src="http://sjpsega.me/images/2019-07-22-kechuangban/kechuangban-zhangfu.jpg" alt="kechuangban-zhangfu" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用错误的方法赚到钱，迟早要还]]></title>
    <link href="http://sjpsega.me/blog/2019/04/04/payout/"/>
    <updated>2019-04-04T00:17:35+08:00</updated>
    <id>http://sjpsega.me/blog/2019/04/04/payout</id>
    <content type="html"><![CDATA[<p><img src="http://sjpsega.me/images/2019-04-04-payout/20190404_us_stock.jpg" alt="20190404_us_stock" /></p>

<p>昨晚，美股做空，第一次收到了「平仓」预警信息。</p>

<p>去年下半年，做空美股，赚了 40%+。今年，中港美股市，都大涨，美股都快涨到前高了，太可怕了……</p>

<p>因为做空，还有杠杆，且杠杆高，现在已经把去年赚的钱，连本带利都亏进去了。</p>

<p>我觉得，我真的印证了这句话「用错误的方法赚到钱，迟早要还」。</p>

<p>也慢慢懂了，别人说的「永远不要做空美股」这句话。</p>

<p>还有，自己缺少政治敏感，我印象中，1 月初，出了美国要暂停加息的消息。其实，那个时候，就应该平仓了，不该全力空了，把自己暴露到不断扩大的风险当中。</p>

<p>去年做空，赚了钱，自大了。需要学习与复盘，就算做空，一定一定要控制仓位。可能，最终，我做空是对的，但我中途可能就爆仓了……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018 年终总结]]></title>
    <link href="http://sjpsega.me/blog/2019/01/01/2018summary/"/>
    <updated>2019-01-01T18:44:36+08:00</updated>
    <id>http://sjpsega.me/blog/2019/01/01/2018summary</id>
    <content type="html"><![CDATA[<p>18 已过，19 已来。
18 年，又是最最最困难的一年，但我运气不错，“猪”事顺利。</p>

<ul>
<li>喜

<ul>
<li>去年，老婆怀孕了，在 8 月底生了一个漂亮的女孩子，终于，儿女双全，人生圆满，辛苦老婆了。</li>
<li>虽然去年老婆怀孕，但为了儿子不太闷，也带儿子出去玩了几次：

<ul>
<li>2 月份去了上海迪士尼，第二次去，人还是那么多，儿子玩得很开心，我是不想再去了……</li>
<li>5 月去了广州长隆，让我眼前一亮的地方，景致不错，很适合带孩子一家人来旅游。长隆酒店餐厅里有真的白虎……去了长隆野生动物园、长隆海洋王国，都是孩子喜欢的地方，儿子很喜欢，说还想再去。</li>
</ul>
</li>
<li>公司旅游，6 月份去了青海，很棒的一次体验，看了下祖国的西部。西宁的羊肉，青海湖辽阔，高原 Windows 桌面般的风景，茶卡尔盐湖的天空之镜，令人印象深刻。</li>
<li>新房子装修完毕，大头的金钱支出，去年基本解决了。多余的也交给了中介，做出租，有了稳定的收入来源。</li>
<li>工作上，17 年表现突出，年末考评好，年终奖丰厚，还获得了一点股权，很不错。工作虽然忙碌，但都是自己感兴趣的，颇有成就感。</li>
<li>去年批量暴雷的 P2P，弄得人心惶惶，因为重仓，我是真的怕了。还去「懒投资」的杭州办事处去实地查看了，结果还没人员入驻，我还以为跑路了呢……还好，「懒投资」稳稳的，没出问题。</li>
<li>投资上，运气实在太好，秉承做多 A 股，做空美股的原则，虽然 A 股、港股亏损，但通过做空美股成功在总体上大幅减少了亏损。A 股的主要仓位变化和去年总结的一致，大部分仓位已经迁移到基金上，做个股太累了，而且今年买个几个个股，踩了 2 个坑，运气太好了……去年的投资总收益为 <code>-2.58%</code>，在全市场大幅下跌的情况下，已经非常不错，具体情况如下表：</li>
</ul>
</li>
</ul>


<table>
<thead>
<tr>
<th style="text-align:left;">投资标的</th>
<th style="text-align:left;">收益率</th>
<th style="text-align:left;">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">A 股 1(RMB)</td>
<td style="text-align:left;"><font color="green">-10.04%</font></td>
<td style="text-align:left;">上证：3307.17 - 2493.9，-24.591%；<br>中证 1000：7017.35 - 4430.02，-36.870%</td>
</tr>
<tr>
<td style="text-align:left;">A 股 2(RMB)</td>
<td style="text-align:left;"><font color="green">-6.91%</font></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">港股(HKD)</td>
<td style="text-align:left;"><font color="green">-17.40%</font></td>
<td style="text-align:left;">恒生：29919.15 - 25845.7，-13.614%</td>
</tr>
<tr>
<td style="text-align:left;">美股(USD)</td>
<td style="text-align:left;"><font color="red">41.30%</font></td>
<td style="text-align:left;">道琼斯：24719.22 - 23327.46，-5.630%；<br>纳斯达克：6903.39 - 6635.28，-3.883%；<br>标普 500：2673.61 - 2506.85，-6.237%</td>
</tr>
</tbody>
</table>


<ul>
<li>忧

<ul>
<li>平时工作上还是不够专注，经常手机上看股票行情，效率低下，主要仓位迁移到基金上，可以少看行情。</li>
<li>生了一个女儿，关注儿子的时间少了，但儿子还算乖，但不听话，不肯写字认字；教他英语，我真是气不打从一处来，太笨了……我自己也需要更加耐心一点吧。</li>
<li>作息还是（第三年了吧……）不规则，经常搞到一两点才睡…</li>
<li>前年是叹息少买一套房，去年是感叹没早点卖房……上半年杭州楼市还是一片红火，但一到 7 月份，差不多是美帝开始贸易战，就一蹶不振，房子不好卖了。去年给妹妹报户口，想起来儿子读书的事情，为了一表生，所以动起了卖房的念头，但是市场不好，也因为我定价稍高，都没人看房。儿子读书的事情，估计要另想办法了。</li>
<li>去年，晋升准备不充分，临场发挥不好，晋升失败了……今年加油吧！</li>
</ul>
</li>
</ul>


<h2>2019 展望</h2>

<ul>
<li>多陪陪儿子，陪儿子多学习，他和我一样，太爱玩了，学习也是一头热。今年 9 月，要上小学了，必须有一个学习的好习惯。还要解决读书一表生的问题。</li>
<li>投资上继续秉承做多 A 股，做空美股的原则，稳扎稳打。</li>
<li>工作专注，多做总结，提高上班 8 小时的效率，早点回家，多陪陪家人。</li>
<li>平时作息要规律，晚上 12 点睡觉，身体重要。（第三年提这条了……）</li>
</ul>


<p>加油！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017 年终总结]]></title>
    <link href="http://sjpsega.me/blog/2018/02/14/2017summary/"/>
    <updated>2018-02-14T22:30:23+08:00</updated>
    <id>http://sjpsega.me/blog/2018/02/14/2017summary</id>
    <content type="html"><![CDATA[<p>转眼间，又到年三十，中国的新年马上就要到来，又到了总结的时候了。今天还刚好是情人节，当然，我没情人&hellip;</p>

<p>总体而言，2017 还不错，中规中矩。</p>

<ul>
<li><p>喜</p>

<ul>
<li>工作上，业务上有变化，小团队一起换了个业务，还好，老板没换。工作上表现不错，积极主动，沉淀不错，但还是要更加努力，希望年终有个好结果，也期望能获得晋升。</li>
<li>投资上，还行，没有亏损，就是赚的太少了，中偏下水平。投资收益在投资总结上计算过：基金：15.37%。A 股账户 1（自己账户）：8.64%（上证 3105.31 - 3307.17，6.558%；中证 1000 8503.66 - 7017.35，-17.354%）。A 股账户 2（丈母娘账户）：17.35%。港股：35.99%（恒生 21993 - 29919，35.993%）。美股：3.1%（道琼斯 19873 - 24719，25.081%；纳斯达克 5425.62 - 6903.39，28.241%）。A股、港股还行，美股因为去年的大亏，胆子小了，操作少，也几乎没大仓位买过股票，都是小玩玩。A 股、港股消耗大量精力，还是小赚或与指数持平，更加坚定了我慢慢转向基金投资的决心。</li>
<li>去年带儿子出去玩了几次。

<ul>
<li>4 月初去了三亚，住在亚龙湾红树林酒店，6 天时间都在酒店周围。亚龙湾景色很美，酒店游乐设施齐全，儿子很喜欢，特别是地下一层的滑滑梯，到现在儿子还常常说起，想再去。</li>
<li>5 月底去了武夷山，坐了中国最美漂流，儿子也自己一步一个脚印爬上了天游峰，表现非常不错。</li>
</ul>
</li>
<li>公司旅游，6 月初去了越南岘港，发现我连越南的海鲜都吃不起，太贵……</li>
<li>儿子吃饭习惯还不错，自己吃饭，饭量不错；在家也自己睡小床了。儿子还很淘气，脾气也倔强，经常发小孩子脾气，但毕竟是孩子，总体还算乖的。</li>
</ul>
</li>
<li><p>忧</p>

<ul>
<li>临近年底，港股投资出现大问题，某途强烈推荐 - 雅生活服务，还给了 9 倍杠杆，结果我用了某途的 9 倍杠杆做了融资打新，中签率还很高，遇到行情不好，新股开盘大跌 -23.09%，坑死了。这几天涨回来许多，期望能回本出了。作为一个教训，以后申购新股要做多功课，然后，不要高杠杆打新了，心脏受不了。</li>
<li>平时工作上不够专注，经常手机上看股票行情，效率低下。</li>
<li>儿子还是做事拖拉，大家都上桌吃饭了，喜欢顾自己玩好一会儿，才肯来吃；人也内向，不肯叫人。</li>
<li>作息还是不规则，经常搞到一两点才睡&hellip;</li>
<li>没想到去年房价暴涨，杭州几乎涨了一倍，判断错误，少买一套房啊，555。</li>
</ul>
</li>
</ul>


<h2>2018 展望</h2>

<ul>
<li>多陪陪儿子，多一点耐心，多带他去外面玩；来年估计不会带他出远门，多陪陪他；来年可能他会有个妹妹（弟弟）了。</li>
<li>家里又要装修了，准备得差不多了，期望一切顺利。</li>
<li>家里装修等要花很多钱，明年是钱的问题上艰难的一年，加油，过了之后就顺风顺水了。</li>
<li>投资上继续稳扎稳打，慢慢转向基金投资。</li>
<li>工作上继续积极主动，多沉淀，多做出成果；工作中要更加专注，不要老去看股票行情了；努力晋升。</li>
<li>平时作息要规律，晚上 12 点睡觉，身体重要。</li>
</ul>


<p>加油！加油！加油！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016 年终总结]]></title>
    <link href="http://sjpsega.me/blog/2017/01/27/2016summary/"/>
    <updated>2017-01-27T15:34:17+08:00</updated>
    <id>http://sjpsega.me/blog/2017/01/27/2016summary</id>
    <content type="html"><![CDATA[<p>转眼间，又到年三十，中国的新年马上就要到来，又到了总结的时候了。</p>

<p>总体而言，2016 喜忧参半。</p>

<ul>
<li><p>喜</p>

<ul>
<li>搞了近一年的装修终于结束了，岳父岳母住进了新房。</li>
<li>5 月份在杭州房价暴涨前夕，买了一套房，浮盈颇丰。</li>
<li>6 月上旬，上海迪士尼开张，带着儿子一行三人去玩了一次，儿子可高兴了，见到了喜爱的米老鼠。</li>
<li>6 月下旬，公司团队旅游，又去了一次泰国清迈，感觉不错。</li>
<li>9 月份，杭州 G20 放假，儿子上幼儿园前夕，去了青岛旅游了一趟。天天去海边，儿子天天都很兴奋，已经爱上了海滩。可惜青岛也有雾霾…</li>
<li>儿子 3 岁了，到了上学的年纪，9 月份开始上幼儿园了，他又认识了好多好朋友。</li>
<li>11 月份买了新出的 PS4 Pro，开通了港服会员，通关了《神秘海域 4》、《巫师 3》，《巫师 3》真的非常符合我的口味，太棒了。</li>
<li>A 股、港股投资还不错；A 股主要买了 ETF 基金，全年收益大概是 4.24%，但在沪深 300 指数(起3725.86，终3310.08)全年 -11.16% 的背景下，还算不错；港股先抑后扬，全年收益率从最低的 -20% 到年底收官的 11.01 %，这还不算美元升值收益，表现令人满意。</li>
<li>工作上，几个熟悉的小伙伴相继离职，自己的老板也更变多次；开始尝试 PM 、技术经理的角色，主导项目进行，不仅仅是 coding，这点做的还不错。</li>
<li>儿子越来越懂事了，说话越来越好玩了。因为我一次发脾气，儿子改掉了吃饭看电视的坏习惯。</li>
</ul>
</li>
<li><p>忧</p>

<ul>
<li>美股亏惨了，亏了近一年的工资，把 A 股赚的都在美股亏出去了，还是在中概股私有化上亏的。私有化不靠谱啊，我把私有化概念当成高息债券玩了，结果因为 A 股大跌，国内政策更变，2015 大量中概要私有化，到 2016 年大多撤销了。我自己也因为在私有化概念上投入过大，买了坑爹的 航美传媒，止损太迟，还一直抱有幻想，导致亏损巨大，全年收益  -35.24%…</li>
<li>儿子因为鞘膜积液和疝气，分别在 2 月和 9 月动了两次手术，目前看，情况良好，期望不要再有事了，这么小的孩子做手术真的太苦了。</li>
<li>11 月，我爸某天早上送儿子上学，居然遇到车祸，不仅残疾车撞坏了，自己还左膝盖粉碎，伤筋动骨 100 天；幸好当时车上的我妈和我儿子没事。</li>
<li>今年，家里的家电坏了好多，热水器、洗衣机、电冰箱都换了一遍。</li>
<li>儿子比较内向，不肯叫人，吃饭拖拖拉拉，急需改善。</li>
<li>作息不规律，晚上经常 1、2 点睡，体检出来也有点问题了。</li>
<li>一直用 16G 的 iPhone 不够用了，10 月底买了个二手 iPhone 6S，结果用了一个月不到，发现听筒有问题，退也退不了了。去苹果官方店修，结果发现这手机的电池换过，并且是非官方店换的，官方店不给修，真的是坑死我了。最后折价了点又卖了出去，折腾了我近两个月。郁闷死，以后买数码产品我还是买一手的算了，记得之前买了个二手 PS3，结果硬盘坏了，换了硬盘，看来二手和我没什么缘分啊。</li>
</ul>
</li>
</ul>


<h2>2017 展望</h2>

<ul>
<li>引导儿子养好吃饭的好习惯；多带他去外面玩，要多叫人，外面活泼一点；4 周岁了，让他自己睡小床了。</li>
<li>投资上稳扎稳打，多学习，不要再重蹈美股巨亏的覆辙了。</li>
<li>工作上再积极主动一点，多沉淀，多做出一点成果。</li>
<li>预计带儿子出去旅游一次，去有海的地方。</li>
<li>平时作息要规律，晚上 12 点前好睡了，身体重要。</li>
</ul>


<p>加油吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 仿淘宝详情页分页组件]]></title>
    <link href="http://sjpsega.me/blog/2016/09/17/paging/"/>
    <updated>2016-09-17T21:42:08+08:00</updated>
    <id>http://sjpsega.me/blog/2016/09/17/paging</id>
    <content type="html"><![CDATA[<p>本例 <a href="https://github.com/sjpsega/Paging">Demo</a>。</p>

<p>淘宝详情页的分页交互效果是一个经典的实现，隔离了淘宝商品基本属性页和图文详情页，即给用户一个良好的使用体验，也通过分页懒加载图文信息，提高了页面首屏加载速度，也减少了不必要的流量损耗。</p>

<p>下面说说怎么实现这个效果。</p>

<h2>效果预览</h2>

<p><img src="http://sjpsega.me/images/2016-09-17-paging/paging-demo.gif" alt="main-flow" /></p>

<h2>实现</h2>

<p>先想一下实现分页的步骤，其实很简单，就两步:</p>

<ol>
<li>将需要分页的页面添加到分页组件上</li>
<li>页面滚动，当检测到达页面边缘，通过动画滚动到下一页或上一页</li>
</ol>


<h3>利用自带的 ScrollView</h3>

<p>想到滚动和分页，第一时间想到的肯定是自带的 UIScrollView。
因为 UIScrollView 不仅有滚动效果，并且本身已经自带了一些分页的 API，比如 <code>pagingEnabled</code> 等。</p>

<p>但是，想一下，直接使用 <code>pagingEnabled</code> 这个属性，然后添加上需要分页的页面，能实现我们的分页效果么？
答案显然是不能的，因为我们的详情页面的基本属性页和图文详情页本身就是大页面，自身就有滚动效果，如果直接使用 UIScrollView ，两个滚动效果叠加，肯定会出现问题的。</p>

<p>经过实践，我的做法是，使用 <code>UIScrollView</code> 来当做分页的容器，是利用相关的滚动 API，来实现翻页的效果。</p>

<h3>实现中遇到的问题</h3>

<p>主要是两个问题：</p>

<ol>
<li>需要分页的子页面，如何判断滚动到最底部</li>
<li>翻页的效果如何实现</li>
</ol>


<p>问题 1 很好解决，仔细研究下 UIScrollView 的属性就有答案了，就是一个数学问题。</p>

<p>图例：</p>

<p><img src="http://sjpsega.me/images/2016-09-17-paging/UIScrollView-structure.jpg" alt="UIScrollView-structure" /></p>

<p>代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">contentOffsetBottom:</span><span class="p">(</span><span class="bp">UIScrollView</span><span class="o">*</span><span class="p">)</span><span class="nv">scrollView</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">contentOffset</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="p">(</span><span class="n">scrollView</span><span class="p">.</span><span class="n">contentSize</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="n">scrollView</span><span class="p">.</span><span class="n">contentInset</span><span class="p">.</span><span class="n">bottom</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>问题 2 也很简单，就是利用了 UIScrollView 自带的一个 API <code>- (void)scrollRectToVisible:(CGRect)rect animated:(BOOL)animated;</code> 便可。</p>

<h2>继续优化</h2>

<p>现在我们的代码实现了分页的效果，但是缺少淘宝详情页的那样分页提示文字，要实现这个也不难。</p>

<ul>
<li>需要翻到下一页，可以在该页的最后加上“继续拖动，查看图文详情”的提示 label。</li>
<li>需要返回到上一页，因为页面是 UIScrollView，可以使用 <a href="https://github.com/CoderMJLee/MJRefresh">MJRefresh</a> 加上一个自定义的 header 加上提示文字便可。</li>
</ul>


<h2>参考资料</h2>

<p><a href="http://tech.glowing.com/cn/practice-in-uiscrollview/">UIScrollView 实践经验</a></p>

<p><a href="https://developer.apple.com/library/content/documentation/WindowsViews/Conceptual/UIScrollView_pg/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008179-CH1-SW1">About Scroll View Programming</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSPatch 学习]]></title>
    <link href="http://sjpsega.me/blog/2016/04/18/jspatch-study/"/>
    <updated>2016-04-18T00:19:13+08:00</updated>
    <id>http://sjpsega.me/blog/2016/04/18/jspatch-study</id>
    <content type="html"><![CDATA[<h2>主体流程</h2>

<p><img src="http://sjpsega.me/images/2016-04-18-jspatch-study/main-flow.jpg" alt="main-flow" /></p>

<h2>JS 调用 OC 代码</h2>

<p><img src="http://sjpsega.me/images/2016-04-18-jspatch-study/js2oc.jpg" alt="js2oc" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cordova WKWebView 学习笔记（二）]]></title>
    <link href="http://sjpsega.me/blog/2016/02/15/cordova-wkwebview-study-2/"/>
    <updated>2016-02-15T00:11:47+08:00</updated>
    <id>http://sjpsega.me/blog/2016/02/15/cordova-wkwebview-study-2</id>
    <content type="html"><![CDATA[<p>这篇主要是代码学习。</p>

<p>官方代码地址：<a href="https://github.com/apache/cordova-plugin-wkwebview-engine">cordova-plugin-wkwebview-engine</a></p>

<p>我的测试代码：<a href="https://github.com/sjpsega/CordovaWKWebViewTest">CordovaWKWebViewTest</a>，融合了一个 Device JSBridge 的例子，该例子参考自<a href="https://crosswalk-project.org/documentation/ios/cordova_plugin_support.html">CrossWalk - Cordova Plugin Support</a></p>

<h3>WKWebView JSBridge 事件传递</h3>

<p>在 WKWebView 中，开始原生支持 web 向 Native 发送消息，是通过 messageHandler 实现的。</p>

<p>在 UIWebView 时代，实现 web 向 app 发送消息，通常是通过 iframe 发起一个特殊请求，UIWebView 通过在拦截方法中，拦截这个特殊请求，使用这种类似 hack 的方式曲线救国的。</p>

<h4>实现步骤</h4>

<ul>
<li>Native 端添加 messageHandler</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">WKUserContentController</span><span class="o">*</span> <span class="n">userContentController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">WKUserContentController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="c1">// 关键代码，添加 messageHandler，名字为 cordova</span>
</span><span class='line'><span class="p">[</span><span class="n">userContentController</span> <span class="nl">addScriptMessageHandler</span><span class="p">:</span><span class="nb">self</span> <span class="nl">name</span><span class="p">:</span><span class="s">@&quot;cordova&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">WKWebViewConfiguration</span><span class="o">*</span> <span class="n">configuration</span> <span class="o">=</span> <span class="p">[[</span><span class="n">WKWebViewConfiguration</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">configuration</span><span class="p">.</span><span class="n">userContentController</span> <span class="o">=</span> <span class="n">userContentController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">WKWebView</span><span class="o">*</span> <span class="n">wkWebView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">WKWebView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">frame</span> <span class="nl">configuration</span><span class="p">:</span><span class="n">configuration</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>JS 端调用</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//调用名为 cordova 的 messageHandler，与 Native 端进行通信</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">webkit</span><span class="p">.</span><span class="nx">messageHandlers</span><span class="p">.</span><span class="nx">cordova</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="nx">command</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Native 接收</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">//实现 WKScriptMessageHandler 接口</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">userContentController:</span><span class="p">(</span><span class="n">WKUserContentController</span><span class="o">*</span><span class="p">)</span><span class="nv">userContentController</span> <span class="nf">didReceiveScriptMessage:</span><span class="p">(</span><span class="n">WKScriptMessage</span><span class="o">*</span><span class="p">)</span><span class="nv">message</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">message</span><span class="p">.</span><span class="n">name</span><span class="p">);</span> <span class="c1">//cordova</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">message</span><span class="p">.</span><span class="n">body</span><span class="p">);</span> <span class="c1">//JSBridge 内容体</span>
</span><span class='line'>    <span class="p">...</span> <span class="c1">//实现调用 Native 代码</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个 messageHandler 一个通道，Cordova 统一使用 cordova 这个通道来通信。</p>

<h3>新增一个插件的实现步骤</h3>

<p>目录结构（列出关键目录与文件）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="o">|</span><span class="n">wkwvtest</span>
</span><span class='line'>    <span class="o">|</span><span class="n">Staging</span>
</span><span class='line'>        <span class="n">config</span><span class="p">.</span><span class="n">xml</span>
</span><span class='line'>        <span class="o">|</span><span class="n">www</span>
</span><span class='line'>            <span class="n">cordova_plugins</span><span class="p">.</span><span class="n">js</span>
</span><span class='line'>            <span class="o">|</span><span class="n">plugins</span> <span class="c1">//JS Plugihns</span>
</span><span class='line'>    <span class="o">|</span><span class="n">Plugins</span> <span class="c1">// Native Plugins</span>
</span></code></pre></td></tr></table></div></figure>


<p>已实现一个 Device 插件为例：</p>

<ul>
<li>在 Staging/www/plugins 目录下，新增一个 device.js 文件，添加 JS 代码</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cordova</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;org.apache.cordova.device.device&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">require</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">module</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">Device</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="nx">Device</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getInfo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">successCallback</span><span class="p">,</span> <span class="nx">errorCallback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//调用 JSBridge，调用名为 Device 的 Native 类 getDeviceInfo 方法</span>
</span><span class='line'>        <span class="nx">exec</span><span class="p">(</span><span class="nx">successCallback</span><span class="p">,</span> <span class="nx">errorCallback</span><span class="p">,</span> <span class="s2">&quot;Device&quot;</span><span class="p">,</span> <span class="s2">&quot;getDeviceInfo&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Device</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在 Staging/www/cordova_plugins.js 文件中注册 device.js</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cordova</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;cordova/plugin_list&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">require</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">module</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;file&quot;</span><span class="o">:</span> <span class="s2">&quot;plugins/device.js&quot;</span><span class="p">,</span><span class="c1">//写明相对 cordova_plugins.js 的文件路径</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;org.apache.cordova.device.device&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;clobbers&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                 <span class="s2">&quot;device&quot;</span> <span class="c1">//全局命名空间，会注册为 window.device</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">metadata</span> <span class="o">=</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;org.apache.cordova.device&quot;</span><span class="o">:</span> <span class="s2">&quot;0.3.0&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>添加在 plugins 目录下，新增 CDVDevice 类，继承于 CDVPlugin</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@interface</span> <span class="nc">CDVDevice</span> : <span class="nc">CDVPlugin</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">getDeviceInfo:</span><span class="p">(</span><span class="n">CDVInvokedUrlCommand</span><span class="o">*</span><span class="p">)</span><span class="nv">command</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在 Staging/config.xml 中注册 CDVDevice</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;widget</span> <span class="na">id=</span><span class="s">&quot;my.project.wkwvtest&quot;</span> <span class="na">version=</span><span class="s">&quot;0.0.1&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/ns/widgets&quot;</span> <span class="na">xmlns:cdv=</span><span class="s">&quot;http://cordova.apache.org/ns/1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;feature</span> <span class="na">name=</span><span class="s">&quot;Device&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">&quot;ios-package&quot;</span> <span class="na">value=</span><span class="s">&quot;CDVDevice&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/feature&gt;</span>
</span><span class='line'><span class="nt">&lt;/widget&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成这步骤，便可以通过 web 端，调用 <code>exec(successCallback, errorCallback, "Device", "getDeviceInfo", []);</code>，调用 Device 这个 Native 类的 getDeviceInfo 方法</p>

<p>详见：<a href="https://github.com/sjpsega/CordovaWKWebViewTest">CordovaWKWebViewTest</a></p>

<h3>&ldquo;同步&rdquo; JSBridge 代码执行</h3>

<p>这里的"同步"需要打引号，虽然 WKWebView 提供了原生 web 向 Native 发送消息的方案，但是注意，这里是发送消息，还不是同步回调。</p>

<p>Cordova 新版本的插件机制，通过多重事件机制的方式，使得一种类型的 JSBridge 同步成为可能 - webView 打开页面后，需要调用 Native 端获取环境变量的 JSBridge。比如上例的 Device 这个 JSBridge 就是典型。</p>

<p>Cordova 启动的几个重要事件：</p>

<ul>
<li>onNativeReady</li>
<li>onDOMContentLoaded</li>
<li>onPluginsReady</li>
<li>onCordovaReady</li>
<li>onDeviceReady</li>
</ul>


<p>通常是从上往下依次进行，并且 web 开始调用 JSBridge，必须监听 <code>deviceready</code> 事件，所以 onDeviceReady 始终最后执行，代表 Cordova 插件环境完全准备完毕。</p>

<p>所以，这种"同步" JSBridge 就是利用这个特性，做了一些文章。</p>

<p>看关键代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cordova</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;org.apache.cordova.device.device&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">require</span><span class="p">,</span> <span class="nx">exports</span><span class="p">,</span> <span class="nx">module</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">channel</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cordova/channel&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">exec</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cordova/exec&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">//注册名为 onCordovaInfoReady 的 Sticky 类型的事件</span>
</span><span class='line'>    <span class="nx">channel</span><span class="p">.</span><span class="nx">createSticky</span><span class="p">(</span><span class="s1">&#39;onCordovaInfoReady&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//告诉系统，必须等待 CordovaInfoReady 事件发送</span>
</span><span class='line'>    <span class="nx">channel</span><span class="p">.</span><span class="nx">waitForInitialization</span><span class="p">(</span><span class="s1">&#39;onCordovaInfoReady&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">Device</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">me</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//在 onCordovaReady 事件中，注册回调，使得系统初始化便调用该回调，并且 onCordovaReady 在 onPluginsReady 事件后 fire</span>
</span><span class='line'>        <span class="nx">channel</span><span class="p">.</span><span class="nx">onCordovaReady</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//调用 JSBridge</span>
</span><span class='line'>            <span class="nx">me</span><span class="p">.</span><span class="nx">getInfo</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">//调用 JSBridge 成功回调用，fire onCordovaInfoReady 事件</span>
</span><span class='line'>                <span class="nx">channel</span><span class="p">.</span><span class="nx">onCordovaInfoReady</span><span class="p">.</span><span class="nx">fire</span><span class="p">();</span>
</span><span class='line'>            <span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Device</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getInfo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">successCallback</span><span class="p">,</span> <span class="nx">errorCallback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">exec</span><span class="p">(</span><span class="nx">successCallback</span><span class="p">,</span> <span class="nx">errorCallback</span><span class="p">,</span> <span class="s2">&quot;Device&quot;</span><span class="p">,</span> <span class="s2">&quot;getDeviceInfo&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Device</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>web 端调用 Device 的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;deviceready&quot;</span><span class="p">,</span> <span class="nx">onDeviceReady</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">onDeviceReady</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">device</span><span class="p">.</span><span class="nx">uuid</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，deviceready 的时候，便可以直接调用 device 这个全局变量。
这是因为之前在 cordova_plugins.js 这个文件中，做了申明，会把 device 变为全局变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;clobbers&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;device&quot;</span> <span class="c1">//全局命名空间，会注册为 window.device</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种设计非常巧妙，但是以我的经验，这种形式的 JSBridge 使用比较局限，主要缺点有：</p>

<ul>
<li>只能对整个 App 周期，固定不变的值使用。如果使用中，这个值会变化则无法使用，如地理位置信息就不行</li>
<li>只能针对属性使用，不能对方法使用</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015 年终总结]]></title>
    <link href="http://sjpsega.me/blog/2016/02/07/2015summary/"/>
    <updated>2016-02-07T22:53:40+08:00</updated>
    <id>http://sjpsega.me/blog/2016/02/07/2015summary</id>
    <content type="html"><![CDATA[<p>今年有点不想写年终总结了，因为去年想要完成的时候，今年大部分都没完成，惨不忍睹啊……</p>

<h2>2015已经过去，先总结下去年的目标与主要的事：</h2>

<ul>
<li>今年还是延续了去年的状态，加班加班加班，但我的无用功比较多，再加上去年股市红火，一部分精力花在炒股上，白天效率好低好低……虽然炒股收益还不错，差不多赚了一年的工资，但是对工作的影响比较大，6月下旬开始剧烈震荡，对工作影响太大，老是要去看手机，就清仓了，结果躲过了大劫。但之后，也习惯性看看行情，看看QQ群，工作效率超级低下，来年需要好好纠正这个习惯了。</li>
<li>今年还是代码比较多，架构方面太少，忙于业务</li>
<li>写了一份图表的专利，很早很早就想写了，一直搁着，结果写上去被无情驳回……</li>
<li>宝宝今年成长特别快，5月份左右，开始说话了，可以跟大人交流了，也变得越来越好玩了；开始会表达自己的需求和情绪了，开始懂道理了，现在快3岁了，特别可爱，有时候不经意间的俏皮话，真是印象深刻。但是，又要但是了，我陪孩子的时间太少了，今年好几个月，宝宝都在他外婆家，我就周末去看看他，相处时间大大减少。男孩子渐渐长大了，</li>
<li>今年晋升了，工资有了较大涨幅，这块还算满意；但从网上的数据，根据我的工作经验，我的工资还是拖后腿……</li>
<li>4月份带老婆去台湾旅游了一次，勉强算出国旅游吧</li>
<li>blog 也荒废了，原定12篇，结果才写了5篇，而且质量一般……</li>
<li>10月份开始操办房子装修，分散了自己相当一部分精力，工作上的、生活上的都是，家还是装修公司不靠谱，非常郁闷，年后装修马上要结束了，这部分精力需要放到更有意义的事情上去。</li>
</ul>


<p>总得来说去年的目标完成得非常非常糟糕，绝对不及格啊……</p>

<h2>想想2016要做的</h2>

<p>想想还是不写了吧，免得来年再失望，好好努力吧，来年看下一年来的收获与得失。</p>

<p>加油吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cordova WKWebView 学习笔记（一）]]></title>
    <link href="http://sjpsega.me/blog/2016/02/06/cordova-wkwebview-study-1/"/>
    <updated>2016-02-06T13:43:47+08:00</updated>
    <id>http://sjpsega.me/blog/2016/02/06/cordova-wkwebview-study-1</id>
    <content type="html"><![CDATA[<h2>WKWebView</h2>

<p>Apple 从 iOS 8 开始，引入了新的 WebView 类 <code>WKWebView</code>，试图替换已经老迈的 UIWebView。</p>

<h3>优点</h3>

<p>通过官方的描述，和自己实际测试，WKWebView功能相当强大，对比 UIWebView 的优点很多：</p>

<ul>
<li>更少的内存使用，渲染相同页面，占用内存基本只有 UIWebView 的 1/3 ~ 1/4，并且大大减少了内存泄露的情况</li>
<li>使用与 Safari 一样的性能强大的 Nirtro JS 引擎</li>
<li>异常强大的 app 与 web 的内容传递

<ul>
<li>可以使用 <code>WKUserContentController</code> 在 Native 端注入用户自定义脚本 JS</li>
<li>web 端可以使用 <code>window.webkit.messageHandlers.{NAME}.postMessage()</code>，直接向 Native 端发送消息。UIWebView 只能使用 iframe 等方案 hack</li>
</ul>
</li>
</ul>


<h3>限制</h3>

<p>官方的描述基本是溢美之词，他不会告诉你 WKWebView 的一些问题，但是这些问题，在做 Hybrid 应用的时候，影响很大，纯 wap 无影响。
估计是切换底层实现的关系，这些问题在 UIWebView 上不存在：</p>

<ul>
<li>无能加载本地文件，只能通过内建一个 WebServer 实现功能。（直到 iOS 9 才新开了一个loadFileURL:allowingReadAccessToURL: 接口，原生实现该功能）</li>
<li>不能注册自定义 NSURLProtocol，导致大量 URL 拦截功能难以实现，比如页面展示本地图片</li>
<li>不能使用 NSHTTPCookieStorage 设置 WebView 的 Cookie</li>
<li>必须 iOS8 及以上版本，Cordova 只支持 iOS9 及以上</li>
</ul>


<p>还有其他在实际开发中，可能爆出的 bug。</p>

<h2>Cordova WKWebview 现状</h2>

<p>Cordova 开发了<a href="https://github.com/apache/cordova-plugin-wkwebview-engine">一个插件</a>来支持 WKWebview，用户可以自行在 WKWebview 与 UIWebView 中选择。</p>

<p>但因为 WKWebView 存在的种种问题，WKWebView 还不是 Cordova 的默认选择。</p>

<p><a href="https://shazronatadobe.wordpress.com/2015/03/03/wkwebview-and-apache-cordova/">cordova 关于 WKWebView 的一些说明</a></p>

<h2>结论</h2>

<ul>
<li>纯 wap 页面，WKWebView 毫无问题，会有很好的表现</li>
<li>Hybrid 应用，因为现在存在的一些问题，以及会导致实现 Camera、PhotoList 等 JSBridge 的功能上会有较大限制，选择 WKWebView 需要慎重</li>
</ul>


<h2>相关代码</h2>

<p><a href="https://github.com/apache/cordova-plugin-wkwebview-engine">cordova-plugin-wkwebview-engine</a></p>

<p><a href="https://github.com/crosswalk-project/ios-extensions-crosswalk">CrossWalk Cordova Plugin Support</a></p>

<h2>相关资料</h2>

<p><a href="http://nshipster.cn/wkwebkit/">WKWeb​View</a></p>

<p><a href="http://docs.telerik.com/platform/appbuilder/cordova/configuring-your-app/configure-web-views">Telerik Platform Documentation - Configure the Web Views</a></p>

<p><a href="http://plugins.telerik.com/cordova/plugin/wkwebview">Cordova Plugins - WKWebView</a></p>

<p><a href="https://crosswalk-project.org/documentation/ios/cordova_plugin_support.html">CrossWalk - Cordova Plugin Support</a></p>

<p><a href="http://stackoverflow.com/questions/29268433/is-there-support-in-cordova-to-wkwebview">Is there support in Cordova to WKWebView?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[isEqual 与 Hash]]></title>
    <link href="http://sjpsega.me/blog/2016/01/14/isequalandhash/"/>
    <updated>2016-01-14T01:17:56+08:00</updated>
    <id>http://sjpsega.me/blog/2016/01/14/isequalandhash</id>
    <content type="html"><![CDATA[<h2>最佳实践</h2>

<ul>
<li>实现 <code>isEqualTo__ClassName__</code></li>
<li>重写 isEqual 方法，同时重写 hash 方法。</li>
</ul>


<h2>关系</h2>

<ul>
<li>两个对象 isEqual 相等，hash 必须也相等</li>
<li>两个对象 hash 相同，isEqual 则不一定相等</li>
</ul>


<h2>碰撞</h2>

<p>当对象存入集合对象时（Array，Set，HashTable等），内部会使用对象的 hash 值来作为 key 来存入。
当两个不相等的对象，有相同的 hash 值，存入集合对象，就会发生<code>碰撞</code>现象。
发生碰撞现象，对使得存取数据变慢，所以需要尽量避免这个现象，但不可能完全避免。</p>

<h2>作为集合对象 key 的注意点</h2>

<ul>
<li>实现 isEqual 和 hash 方法，遵守两者关系，尽量避免 hash 碰撞的情况发生</li>
<li>实现 NSCopying 协议，接口：<code>- (void)setObject:(ObjectType)anObject forKey:(KeyType &lt;NSCopying&gt;)aKey;</code></li>
</ul>


<h2>测试 Demo</h2>

<p><a href="https://github.com/sjpsega/EqualAndHashTest">测试 Demo</a></p>

<h2>参考资料</h2>

<p><a href="http://nshipster.com/equality/">Equality</a></p>

<p><a href="https://mikeash.com/pyblog/friday-qa-2010-06-18-implementing-equality-and-hashing.html">Implementing Equality and Hashing</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD 学习]]></title>
    <link href="http://sjpsega.me/blog/2015/08/31/gcd-study/"/>
    <updated>2015-08-31T00:08:49+08:00</updated>
    <id>http://sjpsega.me/blog/2015/08/31/gcd-study</id>
    <content type="html"><![CDATA[<p>Grand Central Dispatch （GCD）是 Apple 开发的一个多核编程的解决方法。</p>

<p>底层、轻量，是 iOS 上常用的多线程解决方案。</p>

<h2>基本操作</h2>

<h3>sync、async</h3>

<p>dispatch_sync （同步）添加任务到一个队列并等待，直到任务完成，再执行原有队列上的任务。</p>

<p>dispatch_async （异步）添加任务到一个队列，但继续执行原有队列上的任务，在队列中按照 FIFO 的规则执行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_sync</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;log 1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;log 2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">/*</span> <span class="err">输出</span><span class="o">:</span>
</span><span class='line'> <span class="o">*</span> <span class="n">log</span> <span class="mi">1</span>
</span><span class='line'> <span class="o">*</span> <span class="n">log</span> <span class="mi">2</span>
</span><span class='line'> <span class="o">*</span> <span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;log 1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;log 2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">/*</span> <span class="err">输出绝大多数情况为</span><span class="o">:</span>
</span><span class='line'> <span class="o">*</span> <span class="n">log</span> <span class="mi">2</span>
</span><span class='line'> <span class="o">*</span> <span class="n">log</span> <span class="mi">1</span>
</span><span class='line'> <span class="o">*</span> <span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>注：不能在串行（主线程是一种串行队列）线程队列的任务中，再使用 dispatch_sync 添加任务到同一个串行队列中，否则必定发生死锁。</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">//必定发生死锁</span>
</span><span class='line'>    <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>dispatch_once</h3>

<p>dispatch_once 线程安全的方式执行任务且仅执行其代码块一次。</p>

<p>在单例模式中普遍使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'><span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;log 1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;log 2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">/*</span> <span class="err">输出</span><span class="o">:</span>
</span><span class='line'> <span class="o">*</span> <span class="n">log</span> <span class="mi">1</span>
</span><span class='line'> <span class="o">*</span> <span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>dispatch_after</h3>

<p>dispatch_after 延后一定时间，异步执行任务</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="kt">int64_t</span><span class="p">)(</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">)),</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;log 1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;log 2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">/*</span> <span class="err">输出</span><span class="o">:</span>
</span><span class='line'> <span class="o">*</span> <span class="n">log</span> <span class="mi">2</span>
</span><span class='line'> <span class="o">*</span> <span class="n">log</span> <span class="mi">1</span>
</span><span class='line'> <span class="o">*</span> <span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<h2>group</h2>

<p>通常使用分组来关联一组相关的任务，任务全部完成后，再做相关操作。</p>

<h3>group_enter、group_leave</h3>

<p>使用 dispatch_group_enter、dispatch_group_leave 来手动设置一个组任务的开始和结束，用来控制复杂情况下的任务完成情况。</p>

<p>必须保证 dispatch_group_enter 和 dispatch_group_leave <code>成对出现</code>，否则会遇到崩溃问题。</p>

<p>实例：</p>

<p>a）不使用 dispatch_group_enter、dispatch_group_leave 的情况</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testGCDWithGroup</span><span class="p">{</span>
</span><span class='line'>    <span class="k">__block</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">__block</span> <span class="kt">BOOL</span> <span class="n">isDone</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// 1</span>
</span><span class='line'>    <span class="kt">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// 2</span>
</span><span class='line'>    <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;CGD 1 .&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// 3</span>
</span><span class='line'>        <span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="kt">int64_t</span><span class="p">)(</span><span class="mf">0.3</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">)),</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;CGD 1 after.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;done !!!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// 4</span>
</span><span class='line'>        <span class="n">isDone</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">count</span><span class="p">).</span><span class="n">to</span><span class="p">.</span><span class="n">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="c1">// 5</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">isDone</span><span class="p">).</span><span class="n">will</span><span class="p">.</span><span class="n">beTruthy</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>该测试用例执行步骤为:</p>

<ol>
<li>生成一个自定义组</li>
<li>在自定义组上，添加任务到子线程上执行</li>
<li>子线程上的任务为执行一个延时任务，使得 count + 1</li>
<li>当一个组内的任务全部完成，设置 isDone 为 YES，并期望 count 为 1</li>
<li>异步执行，期望 isDone 为 YES</li>
</ol>


<p>期望4、5处的测试均能通过，但测试结果为：</p>

<ol>
<li>5 的测试 case 为通过</li>
<li>4 的测试 case <code>不通过</code>，count 不为 1</li>
</ol>


<p>因为在这个例子中，执行完毕 dispatch_group_async 中的任务，就算任务完成了；而不是等到 dispatch_group_async 中的 dispatch_after 任务完成，才算任务完成。</p>

<p>b）使用 dispatch_group_enter、dispatch_group_leave 的情况</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testGCDWithGroupEnterAndLeave</span><span class="p">{</span>
</span><span class='line'>    <span class="k">__block</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">__block</span> <span class="kt">BOOL</span> <span class="n">isDone</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'>    <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;CGD 1 .&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="kt">int64_t</span><span class="p">)(</span><span class="mf">0.3</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">)),</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;CGD 1 after.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
</span><span class='line'>            <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;done !!!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">isDone</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">count</span><span class="p">).</span><span class="n">to</span><span class="p">.</span><span class="n">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">isDone</span><span class="p">).</span><span class="n">will</span><span class="p">.</span><span class="n">beTruthy</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个测试用例的全部通过，使用手动控制组任务的开始和结束，完美解决了例子 a 中碰到的问题。</p>

<p>使用 dispatch_group_enter、dispatch_group_leave，用来处理复杂的异步任务非常有效。</p>

<h2>queue</h2>

<h3>串行、并发</h3>

<p>串行队列每次只有一个任务被执行，并发队列在同一时间可以有多个任务被执行。</p>

<p>主线程是系统提供的一个特殊的队列，是一个<code>串行</code>队列，是唯一可用与更新 UI 的线程。</p>

<p>除了主线程，其他均为子线程，通常用来执行与 UI 无关的操作。
实际编码中，通常使用 <code>dispatch_get_global_queue(long identifier, unsigned long flags)</code> 来获取子线程队列。通过该方法获取的是<code>并发</code>的全局调度队列，并且可以设置四个不同优先级的队列：high、default、low、background，若没有特殊原因，只使用 default 级别的队列。</p>

<p>用户还可以使用 <code>dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)</code> 来创建自定义的串行或并发队列。
主线程是系统提供的<code>串行</code>队列。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//创建自定义并发队列</span>
</span><span class='line'><span class="kt">dispatch_queue_t</span> <span class="n">concurrentQueue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;com.sjpsega&quot;</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
</span><span class='line'><span class="c1">//创建自定义创兴队列</span>
</span><span class='line'><span class="kt">dispatch_queue_t</span> <span class="n">serialQueue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;com.sjpsega&quot;</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_SERIAL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>dispatch_barrier</h2>

<p>barrier 意为“障碍”。dispatch_barrier 在并发队列上工作时扮演一个串行式的瓶颈。当提交的任务开始执行时，该 API 保障这个时刻队列里只执行当前任务，不会执行其他任务。</p>

<p><img src="http://sjpsega.me/images/2015-08-31-gcd-study/dispatch_barrier.png" alt="dispatch_barrier" /></p>

<p>使用 dispatch_barrier API 最佳的方式是使用<code>自定义并发队列</code>执行。</p>

<p>下面以使用 dispatch_barrier 保证类类变量线程安全为例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addStudents:</span><span class="p">(</span><span class="n">Student</span> <span class="o">*</span><span class="p">)</span><span class="nv">student</span><span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_barrier_async</span><span class="p">(</span><span class="n">_concurrentQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_students</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">student</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">students</span><span class="p">{</span>
</span><span class='line'>    <span class="k">__block</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">copyObj</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">_concurrentQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">copyObj</span> <span class="o">=</span>  <span class="p">[</span><span class="n">_students</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">copyObj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，通常保证类变量线程安全，若不是高并发的情况下，比较简单的方式是使用 <code>synchronized</code> 关键字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addStudents:</span><span class="p">(</span><span class="n">Student</span> <span class="o">*</span><span class="p">)</span><span class="nv">student</span><span class="p">{</span>
</span><span class='line'>    <span class="k">@synchronized</span><span class="p">(</span><span class="n">_students</span><span class="p">){</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_students</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">student</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">students</span><span class="p">{</span>
</span><span class='line'>    <span class="k">@synchronized</span><span class="p">(</span><span class="n">_students</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">_students</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>测试 Demo</h2>

<p><a href="https://github.com/sjpsega/GCDTest">测试 Demo</a></p>

<h2>参考资料</h2>

<p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md">GCD 深入理解：第一部分</a></p>

<p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-05-14-grand-central-dispatch-in-depth-part-2.md">GCD 深入理解：第二部分</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS UIWebView 自定义协议文件加载缓存问题]]></title>
    <link href="http://sjpsega.me/blog/2015/06/15/uiwebview-cache-bug-by-custom-protocol/"/>
    <updated>2015-06-15T22:56:31+08:00</updated>
    <id>http://sjpsega.me/blog/2015/06/15/uiwebview-cache-bug-by-custom-protocol</id>
    <content type="html"><![CDATA[<h2>起因</h2>

<p>一个简单的需求：为了减少网络请求，一些前端资源会做本地缓存；使用 WebView 访问页面的时候，拦截特定请求，使得特定请求直接加载本地资源。</p>

<p>但是做的过程中发现，当请求的资源为自定义协议的时候，比如加载的 url 为 <code>abc://xxx.com/xx.js</code> 的时候，系统会强制对该资源做缓存，并且调用系统提供的清除缓存接口，如 <code>[[NSURLCache sharedURLCache] removeAllCachedResponses]</code>， 都无法清除该缓存，除非重启 App。</p>

<p>这就导致该资源内容发生变化的时候，无法立即生效，这在业务中，显然是不能接受的。</p>

<p><code>注</code>：该方案主要针对 <code>UIWebView</code> 有效；<code>WKWebView</code> 因为不能使用自定义 NSURLProtocol 拦截资源，方法二就不起作用。</p>

<h2>解决</h2>

<h3>方法一：html 模板上，资源 url 加上随机字符串</h3>

<p>在 html 页面上修改 url 字符串，如 <code>abc://xxx.com/xx.js</code>，需要改成 <code>abc://xxx.com/xx.js?t=123</code>，这样系统就不会缓存该资源。</p>

<p>该方法简单直接。</p>

<h3>方法二：创建自定义 NSURLProtocol，拦截请求，并且在创建 response 时，修改自定义协议为 http 或 https</h3>

<p>伪代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//原请求</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">requestURLString</span> <span class="o">=</span> <span class="s">@&quot;abc://xxx.com/xx.js&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">//根据原请求获得的 data 数据</span>
</span><span class='line'><span class="bp">NSData</span> <span class="o">*</span><span class="n">abcData</span> <span class="o">=</span> <span class="p">...</span>
</span><span class='line'><span class="c1">//将原请求的自定义协议改成 http</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">changeURLString</span> <span class="o">=</span> <span class="s">@&quot;http://xxx.com/xx.js&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">//创建 response</span>
</span><span class='line'><span class="bp">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="n">changeURLString</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSURLResponse</span><span class="o">*</span> <span class="n">response</span> <span class="o">=</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSURLResponse</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithURL</span><span class="p">:</span><span class="n">url</span>
</span><span class='line'>                          <span class="nl">MIMEType</span><span class="p">:</span><span class="s">@&quot;application/x-javascript&quot;</span>
</span><span class='line'>             <span class="nl">expectedContentLength</span><span class="p">:</span><span class="n">abcData</span><span class="p">.</span><span class="n">length</span>
</span><span class='line'>                  <span class="nl">textEncodingName</span><span class="p">:</span><span class="s">@&quot;UTF-8&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="nb">self</span> <span class="n">client</span><span class="p">]</span> <span class="nl">URLProtocol</span><span class="p">:</span><span class="nb">self</span> <span class="nl">didReceiveResponse</span><span class="p">:</span><span class="n">response</span> <span class="nl">cacheStoragePolicy</span><span class="p">:</span><span class="n">NSURLCacheStorageNotAllowed</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="nb">self</span> <span class="n">client</span><span class="p">]</span> <span class="nl">URLProtocol</span><span class="p">:</span><span class="nb">self</span> <span class="nl">didLoadData</span><span class="p">:</span><span class="n">abcData</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="nb">self</span> <span class="n">client</span><span class="p">]</span> <span class="nl">URLProtocolDidFinishLoading</span><span class="p">:</span><span class="nb">self</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>本来结合方法一的解决方式，创建 response 的时候，在 url 后加上随机字符串，但是经过试验，该方案<code>无效</code>，缓存始终存在。</p>

<p>使用该解决方法解决缓存问题，据个人猜测是因为，iOS 系统默认缓存数据，但针对 http 或 https 协议会根据 Cache-Control 等字段判断是否缓存。</p>

<p>具体可见 <a href="https://github.com/sjpsega/CustomProtocolCacheTest">测试demo</a>，并注意 log 信息。</p>

<h2>讨论</h2>

<p>解决这个缓存问题，其实我还是有些疑惑，因为试了所有 iOS 给出的数据缓存 API，都不起作用。这些包括：</p>

<ul>
<li>使用 [[NSURLCache sharedURLCache] removeAllCachedResponses] 清理缓存</li>
<li>重写了 NSURLCache 的 - (NSCachedURLResponse <em>)cachedResponseForRequest:(NSURLRequest </em>)request 方法，不返回 response 对象</li>
<li>自定义 NSURLProtocol 中，使用 NSURLConnection 加载数据，实现 NSURLConnectionDelegate 的 - (NSCachedURLResponse <em>)connection:(NSURLConnection </em>)connection willCacheResponse:(NSCachedURLResponse *)cachedResponse 方法，返回 nil，不做对应 url 数据的缓存。</li>
</ul>


<p>然后，方法一与方法二中，我都试验了 url 加随机字符串的方式，但是为什么 html 模板上的资源 url 加上随机字符串有效，创建 response 时候，url 加上随机字符串无效，我也感到无解。</p>

<p>感觉在 webView 资源缓存的问题上，Apple 官方还是有些接口没开放，或者是我不知道&hellip;</p>

<h2>参考资料</h2>

<p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html#//apple_ref/doc/uid/10000165i">URL Loading System</a></p>

<p><a href="http://nshipster.cn/nsurlcache/">NSURLCache</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[台湾游记]]></title>
    <link href="http://sjpsega.me/blog/2015/04/27/taiwanyou/"/>
    <updated>2015-04-27T01:41:49+08:00</updated>
    <id>http://sjpsega.me/blog/2015/04/27/taiwanyou</id>
    <content type="html"><![CDATA[<p>4 月份天气不冷不热，是个出游的好时期。趁着工作上的事情暂时告一段落，忙里偷闲，delay 了近半年的台湾游终于成行。</p>

<h2>注意事项</h2>

<p>因为是跟团游，所以操心的事情不多，去台湾前看了一些别人的攻略，自己去了次，体会更深了，记录下。</p>

<ul>
<li>去机场坐飞机一定要赶早。
去的那天因为我们要去上海浦东坐下午1点10分的飞机，本以为早上8点去武林广场坐大巴来得及，结果大巴要开3个半小时，顺利的话，11点半到机场。但是坐国际航班需要提前2个小时检票，时间太紧张，结果我们雇了辆小车，和一个大哥拼车，我们俩人花了800RMB，赶到机场&hellip;</li>
<li>货币兑换最好带RMB到台湾再换。在台湾的机场用RMB换台币，汇率好，兑换金额不限，每笔只要30台币（约6RMB）。回大陆前，还能在机场换回RMB。
我自己是带了招行卡去台湾ATM机上换的，结果每笔最低10RMB手续费，换的多，手续费更高。听说华夏卡免手续费，但是我没有这卡，无从验证。</li>
<li>台湾电信运营商针对游客的7天无限流量套餐蛮划算的，450新台币，可在机场或代理商店里办理，很方便。这年头没网上怎么行。</li>
</ul>


<h2>台湾印象</h2>

<p>跟团游时间很紧，基本是上车睡觉，下车拍照的模式，再加上购物点有点多，蛮郁闷的。
但是这丝毫不影响我们对台湾的好印象，简单的说就是民风纯朴，风景秀丽。</p>

<h3>day 1</h3>

<p>第二天的路线是：国父纪念馆 -> 101大厦 -> 士林夜市 -> 福华大酒店
我们从桃园机场着陆，到达宝岛台湾，坐车很快就到了台北，台湾的城市比较小，从一个城市开车很快就到另一个城市了，在大陆是不可想象的。</p>

<ul>
<li>在国父纪念馆看了交接仪式和降旗仪式，简单了解了孙中山的生平。</li>
<li>101大厦89楼鸟瞰了台北的全景，和全球唯一外露的，可供游客参观的<a href="http://baike.baidu.com/link?url=gByDUgpWBQRL0EzaOtar4Sma6NquYdUljNg4IXVXqPZzwPEo1ss-svGZ7X1YJzeWSxpqXSVDjYtAkA50xx2bTq">风阻尼器</a>。</li>
<li>在士林夜市吃了许多台湾的地道美食，有拍摄《转角遇到爱》的大头龙的蚵仔煎，号称比脸大的豪大大鸡排，名字奇怪的棺材板等等。
吃完美食，回到第一晚的酒店，福华大酒店，据说很有名。放下行李，立马去市区转转，我的目的是去办个手机卡，用来上网。因为不熟悉路，问了好几次台北的路人，才好不容易找到了中华电信办理了手机卡。通过问路，问的几个都是年轻人，都特别耐心，给人的印象很好，特别是一个便利店的店员，问他路的时候，店里其实蛮忙的，他特意放下手头的工作，让同事打理，把我们领到店门口给我们指路。</li>
</ul>


<h3>day 2</h3>

<p>第二天的路线是：士林官邸 -> 台北故宫博物馆 -> 维格饼屋 -> 日月潭大酒店</p>

<ul>
<li>士林官邸是老蒋的住处，地方很大，环境优美，有教堂，有花园，是个养人的好地方。</li>
<li>台北故宫博物馆，诠释了浓缩就是精华，东西不多，但都是精品。规定有点多：不能穿拖鞋、不能背双肩包、不能带水杯进去、不能带单反、不准拍照等等。</li>
<li>维格饼屋是第一个购物点，维格有名的是凤梨酥。比较有意思的是，在这里要亲手做凤梨酥。因为店家已经准备好了馅料和面团，所以只要稍微揉搓，放入馅料，搓成团，然后放入模具，造型各异的凤梨酥就搞定了。
在这里买了点凤梨酥、绿豆糕、牛轧糖，准备回去给家人朋友带点。值得一说的是，我觉得绿豆糕比凤梨酥好吃多了。</li>
<li>下午基本是在车上度过，大概3个小时的行程，从台北赶到了日月潭，到达的酒店的时候，天色已晚。
晚餐在酒店里吃自助，自助很赞，连鲍鱼、螃蟹、鱿鱼、生鱼片、刺身都有。但我最喜欢这里的粉丝担仔面，加上一勺辣椒，特美味。
吃完晚餐，到日月潭的街区逛了逛，这里给人的感觉非常宁静，人不多。之前给我有相同感觉的是日本的河口湖，都是在湖边的小镇。</li>
</ul>


<h3>day 3</h3>

<p>第三天的行程：日月潭 -> 九族文化村 -> 钰通大饭店</p>

<ul>
<li>日月潭蛮大的，湖水是湛蓝的，水深达700余米，感觉像云南的洱海，天蓝水蓝，浑然一体。早上一团人坐游艇在日月潭里兜了一圈，游览了玄光寺。值得一说的是，玄光寺这里买的凤梨是本次在台湾吃到的最好吃的，很甜。</li>
<li>下午在日月潭旁，坐缆车来到了九族文化村，这里看了传统的民俗表演，还有好多刺激的游乐设施，比如疯狂过山车等等。</li>
<li>再坐车到嘉义，晚饭吃了小火锅，晚上入住钰通大饭店。说是这里是台湾的乡下，但是和大陆的乡下感觉不同，大陆的乡下破破的，真是乡下；台湾的乡下该有的都有，比大城市空旷些，感觉住在这里很舒服。</li>
</ul>


<h3>day 4</h3>

<p>第四天的行程：阿里山 -> yuyupas 邹族文化园区 -> 高雄85大楼君鸿大酒店 -> 六合夜市</p>

<ul>
<li>早晨早早起床，6点半出发前往阿里山，看了阿里山神木。因为是跟团游，大巴上山，大巴下山，少了爬山的感觉，对阿里山的感觉一般，再加上大陆的名山大川很多。</li>
<li>yuyupas 邹族文化园区，又是一个购物点，这里主要是卖茶叶，阿里山山茶，喝了点，口感一般。</li>
<li>下午坐车来到高雄，入住85大楼君鸿大酒店，背靠高雄港，很气派。</li>
<li>晚上晚餐自理，我们来到六合夜市，这是个观光客居多的夜市，每个小吃平均是100新台币，价格还行。吃了这里的超有名的郑老牌木瓜牛奶，马英九都来吃过三次；老师傅烤制的泰国虾等等。</li>
</ul>


<h3>day 5</h3>

<p>第五天的行程：旗津海岸公园 -> 猫鼻头公园 -> 恒春渔港吃海鲜 -> 关山看日落 -> 福华度假酒店 -> 垦丁大街</p>

<ul>
<li>早上轮渡到旗津看海，因为天气有点燥热，加上没随身带凉鞋，拍了拍照就走了。看了一间庙宇，在旁边的一间冰铺吃了好吃的芒果刨冰。</li>
<li>坐车来到台湾岛南端 - 垦丁，一路上看到好多凤梨、香蕉树，在猫鼻头公园看了天蓝海蓝的美景。</li>
<li>来到恒春的一个小渔港吃海鲜，因为这里来吃的不仅有游客，还有台湾本地人，所以价格还不错；特别是生鱼片，100新台币有近20片，但是我对生鱼片无爱啊&hellip;在这里吃了两个打海鲜，共花了2500新台币，是在台湾最奢侈的一餐了。</li>
<li>吃完海鲜，5点前往关山看日落。在天蓝海蓝的地方看日落真美。</li>
<li>晚上入住福华度假酒店，酒店里的土著木雕、椅子等，很特别。</li>
<li>逛了带感的垦丁大街，吃了点小吃。</li>
</ul>


<h3>day 6</h3>

<p>第五天的行程：台湾最南点 -> 龙磐公园 -> 恒春古城 -> 高雄国际机场</p>

<ul>
<li>在台湾岛最南端，走过一处幽静的小路，看到最南端的标志建筑。</li>
<li>龙磐公园是一个天大地大草原小的地方，很漂亮，在悬崖边看海，别有一番风味。</li>
<li>恒春古城很一般，就是一处复建的城墙……</li>
<li>然后，6天行程结束，依依不舍坐飞机回家……</li>
</ul>


<h3>结语</h3>

<p>这次的台湾游运气这不错，6天都是晴空万里，只有第6天下了一点点小雨，还躲过了今年为止台湾最大的花莲地震。
台湾很美，时间太少，行程太赶，愿下次再来。</p>
]]></content>
  </entry>
  
</feed>
